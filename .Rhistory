123/7
119/7
tT = 118
sir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1]
I <- x[2]
R <- x[3]
with(
as.list(params),{
dS <- -beta*S*I
dI <- beta*S*I-gamma*I
dR <- gamma*I
dx <- c(dS,dI,dR)
list(dx)
}
)
}
times  <- seq(0,120,by=1)
params <- c(beta=0.3,gamma=1/7)
xstart <- c(S=9999/10000,I=1/10000,R=0)
out   <- as.data.frame(lsoda(xstart,times,sir.model.closed,params))
inf   <- out$I*10000
plot(inf, type="l",)
times  <- seq(0,tT,by=1)
params <- c(beta=0.3,gamma=1/7)
xstart <- c(S=9999/10000,I=1/10000,R=0)
out   <- as.data.frame(lsoda(xstart,times,sir.model.closed,params))
inf   <- out$I*10000
plot(inf, type="l",)
GP  <- rep(NA, tT+1)
10/7
10%/%7
10%%7
1%%7
7%%7
6%%7
weekprob <- c(0.2, 0.98, 0.92, 0.88, 0.85, 0.89, 0.24)
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
GPi[t] <- rbinom(1, inf[t], weekprob[t%%7 +1] )
}
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
GP[t] <- rbinom(1, inf[t], weekprob[t%%7 +1] )
}
warnings
warnings()
inf
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
GP[t] <- rbinom(1, round(inf[t]), weekprob[t%%7 +1] )
}
GP
plot(inf, type="l",lwd=3)
plot(GP, type="l",lwd=3)
curve(dbeta(x, 0.2/0.8*30, 30))
curve(dbeta(x, 0.2/0.8*40, 40))
curve(dbeta(x, 0.2/0.8*10, 10))
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
pt    <- rbeta(1, weekprob[t%%7 +1]/(1-weekprob[t%%7 +1])*20, 20 )
GP[t] <- rbinom(1, round(inf[t]), pt)
}
plot(GP, type="l",lwd=3)
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
pt    <- rbeta(1, weekprob[t%%7 +1]/(1-weekprob[t%%7 +1])*10, 10 )
GP[t] <- rbinom(1, round(inf[t]), pt)
}
plot(GP, type="l",lwd=3)
set.seed(1234)
tT = 118
sir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1]
I <- x[2]
R <- x[3]
with(
as.list(params),{
dS <- -beta*S*I
dI <- beta*S*I-gamma*I
dR <- gamma*I
dx <- c(dS,dI,dR)
list(dx)
}
)
}
times  <- seq(0,tT,by=1)
params <- c(beta=0.3,gamma=1/7)
xstart <- c(S=9999/10000,I=1/10000,R=0)
out   <- as.data.frame(lsoda(xstart,times,sir.model.closed,params))
inf   <- out$I*10000
plot(inf, type="l",lwd=3)
weekprob <- c(0.2, 0.98, 0.92, 0.88, 0.85, 0.89, 0.24)
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
pt    <- rbeta(1, weekprob[t%%7 +1]/(1-weekprob[t%%7 +1])*10, 10 )
GP[t] <- rbinom(1, round(inf[t]), pt)
}
plot(GP, type="l",lwd=3)
ICU<- rep(NA,( tT+1)/7)
weekprob <- c(0.2, 0.98, 0.92, 0.88, 0.85, 0.89, 0.24)*0.6
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
pt    <- rbeta(1, weekprob[t%%7 +1]/(1-weekprob[t%%7 +1])*10, 10 )
GP[t] <- rbinom(1, round(inf[t]), pt)
}
plot(GP, type="l",lwd=3)
ICU<- rep(NA,( tT+1)/7)
ICU<- rep(NA,( tT+1)/7)
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.15/0.85*10, 10 )
ICU[w] <- rbinom(1, round(inf[((w-1)*7+1):w*7]), pt)
}
ICU<- rep(NA,( tT+1)/7)
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.15/0.85*10, 10 )
ICU[w] <- rbinom(1, round(sum(inf[((w-1)*7+1):w*7])), pt)
}
warnings()
ICU<- rep(NA,( tT+1)/7)
ICU
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.15/0.85*10, 10 )
ICU[w] <- rbinom(1, round(sum(inf[((w-1)*7+1):(w*7)])), pt)
}
plot(GP, type="l",lwd=3)
plot(ICU, type="l",lwd=3)
inf2 <- c(0,0,0,0,inf)
ICU<- rep(NA,( tT+1)/7)
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.15/0.85*10, 10 )
ICU[w] <- rbinom(1, round(sum(inf2[((w-1)*7+1):(w*7)])), pt)
}
plot(ICU, type="l",lwd=3)
pt    <- rbeta(1, 0.15/0.85*100, 100)
inf2 <- c(0,0,0,0,inf)
ICU<- rep(NA,( tT+1)/7)
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.15/0.85*100, 100)
ICU[w] <- rbinom(1, round(sum(inf2[((w-1)*7+1):(w*7)])), pt)
}
plot(ICU, type="l",lwd=3)
inf2 <- c(0,0,0,0,inf)
ICU<- rep(NA,( tT+1)/7)
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.05/0.95*100, 100)
ICU[w] <- rbinom(1, round(sum(inf2[((w-1)*7+1):(w*7)])), pt)
}
plot(ICU, type="l",lwd=3)
library(deSolve)
set.seed(1234)
tT = 118
sir.model.closed <- function (t, x, params) { #here we begin a function with three arguments
S <- x[1]
I <- x[2]
R <- x[3]
with(
as.list(params),{
dS <- -beta*S*I
dI <- beta*S*I-gamma*I
dR <- gamma*I
dx <- c(dS,dI,dR)
list(dx)
}
)
}
times  <- seq(0,tT,by=1)
params <- c(beta=0.3,gamma=1/7)
xstart <- c(S=9999/10000,I=1/10000,R=0)
out   <- as.data.frame(lsoda(xstart,times,sir.model.closed,params))
inf   <- out$I*10000
plot(inf, type="l",lwd=3)
# lines(out$S)
# lines(out$R)
weekprob <- c(0.2, 0.98, 0.92, 0.88, 0.85, 0.89, 0.24)*0.6
GP  <- rep(NA, tT+1)
for (t in 1:(tT+1)){
pt    <- rbeta(1, weekprob[t%%7 +1]/(1-weekprob[t%%7 +1])*10, 10 )
GP[t] <- rbinom(1, round(inf[t]), pt)
}
plot(GP, type="l",lwd=3)
inf2 <- c(0,0,0,0,inf)
ICU<- rep(NA,( tT+1)/7)
for (w in 1:length(ICU)){
pt    <- rbeta(1, 0.05/0.95*100, 100)
ICU[w] <- rbinom(1, round(sum(inf2[((w-1)*7+1):(w*7)])), pt)
}
plot(ICU, type="l",lwd=3)
getwd()
# sample form the normal distribution
N         <- 1000
meanq     <- 0
varq      <- 1
xis       <- rnorm(N, meanq, sqrt(varq))
pitilfun  <- function(x){
if((x>=0)&(x<=4)){
pitil <- 1
}else{
pitil <- 0
}
return(pitil)
}
pitilf    <- Vectorize(pitilfun, "x")
qxis      <- dnorm(xis, meanq, sqrt(varq) )
pitilxis  <- pitilf(xis)
wbaris    <- pitilxis/qxis
wis       <- wbaris/sum(wbaris)
par(mfrow=c(1, 2), mar=c(2,2,2,0))
plot(xis, wis, type="h", col="gray", xlim=c(min(xis), 4.1) , main="")
plot(density(xis, weights = wis), xlim=c(min(xis), 4.1), main="", lwd=3)
curve(dunif(x, 0, 4), add=TRUE, col="green", lwd=3)
curve(dnorm(x, meanq, sqrt(varq) ), add=TRUE, col="red", lwd=3, lty=2)
data <- read.csv("seOMXlogreturns2012to2014.csv", header=F)
y  <- t(data)
setwd("/Volumes/ALICE/17SMC")
data <- read.csv("seOMXlogreturns2012to2014.csv", header=F)
y  <- t(data)
par(mfrow=c(1,1), mar=c(2,2,2,2))
plot(1:500, y, type="l", main="data", xlab = "t")
Tmax <- 500
# fixed parameter
phi   <- 0.98
sigma <- 0.16
beta  <- 0.70
N <- 1000
# sample from X0
t <- 0
x0 <- rnorm(N, 0, sigma)
wt <- rep(1/N, N)
t <- 1
# prepare the matrix where to store
# the empirical filtering distribution
Xmat <- matrix(NA, ncol=Tmax, nrow=N)
# And the associated weights
Wmat <- matrix(NA, ncol=Tmax, nrow=N)
xt <- x0
for (t in 1:Tmax){
# resample step
at       <- sample(1:N, size = N, prob = wt , replace = TRUE)
xtm1a    <- xt[at]
# propagation step
xt       <- rnorm(N, mean = phi*xtm1a, sd=sigma)
Xmat[,t] <- xt
# weighting
wtildet  <- dnorm(rep(y[t], N), mean=rep(0, N), sd=beta*sqrt(exp(xt)))
wt       <- wtildet/sum(wtildet)
Wmat[,t] <- wt
}
# plot of 50 of the 500 empiric filtering distribution on the first 20 steps
symbols(x=rep(1,50), y=Xmat[1:50,1], circles=Wmat[1:50,1], inches=1/10,
ann=F, bg=rgb(0,0,0,0), fg=NULL, xlim=c(0, 21), ylim = c(-1.5,1.5))
for (t in 2:20){
symbols(x=rep(t,50), y=Xmat[1:50,t], circles=Wmat[1:50,t], inches=1/10,
ann=F, bg=rgb(0,0,1,0.2), fg=NULL, add = TRUE)
Sys.sleep(0.5)
}
# plot of the mean of the filtering distribution
meanfilt <- rep (NA, Tmax)
for (t in 1: Tmax){
meanfilt[t] <- weighted.mean(Xmat[,t], Wmat[,t])
}
plot (1:Tmax, y, col="red", type = "l")
lines (1:Tmax, meanfilt, col="green", type = "l", lwd=3)
beta.vec <- c(0.5, 0.75, 1, 1.25, 1.5)
loglike <- matrix(NA, nrow=10, ncol = 5)
N <- 200
Tmax <- 500
for(b in 1:length(beta.vec)){
beta <- beta.vec[b]
for (rep in 1:10){
phi   <- 0.98
sigma <- 0.16
t     <- 0
x0    <- rnorm(N, 0, sigma)
w0    <- rep(1/N, N)
t     <- 1
wt    <- w0
Xmat  <- matrix(NA, ncol=500, nrow=N)
# vector whete to store the (log) likelihoods over times
veclikesum <- rep(NA, Tmax)
xt    <- x0
for (t in 1:Tmax){
# resample step
at            <- sample(1:N, size = N, prob = wt , replace = TRUE)
xtm1a         <- xt[at]
# propagation step
xt            <- rnorm(N, mean = phi*xtm1a, sd=sigma)
Xmat[ ,t]     <- xt
# weighting step + saving loglike
wtildet       <- dnorm(rep(y[t], N), mean=rep(0, N), sd=beta*sqrt(exp(xt)))
veclikesum[t] <- log(sum(wtildet))-log(N)
wt            <- wtildet/sum(wtildet)
}
loglike[rep, b] <- sum(veclikesum)
}
}
par(mfrow=c(1,1), mar=c(4,4,2,2))
boxplot(loglike, main=paste("N equals to ", N),
xlab=expression(beta), ylab="logLike")
for(i in 1:10){lines(loglike[i,], col="blue")}
rm(list = ls())
library(rstan)
install.packages("rstan")
library(rstan)
Dim=4
data_x =c(1.0, 1.5, 1.5, 1.5, 2.5, 4.0, 5.0, 5.0, 7.0, 8.0, 8.5, 9.0, 9.5,
9.5, 10, 12, 12, 13, 13, 14.5, 15.5, 15.5, 16.5, 17, 22.5, 29.0, 31.5)
data_y = c(1.80, 1.85, 1.87, 1.77, 2.02, 2.27, 2.15, 2.26, 2.47, 2.19, 2.26,
2.40, 2.39, 2.41, 2.50, 2.32, 2.32, 2.43, 2.47, 2.56, 2.65, 2.47, 2.64,
2.56, 2.70, 2.72, 2.57)
StanDugongs<- "
data {
int <lower=1> N;
vector[N] x;
vector[N] y;
}
parameters {
real <lower=0> alpha;
real <lower=0> beta;
real <lower=0, upper=1> gamma;
real <lower=0> sigma;
}
model {
vector[N] mu;
mu = alpha + beta * gamma^(x);
alpha ~ uniform(0,100000);
beta  ~ uniform(0,100000);
gamma ~ beta(7,7/3);
sigma ~ uniform(0,100000);
y ~ normal(mu, sigma);
}
"
data = list(y = data_y, x=data_x, N = length(data_x))
data = list(y = data_y, x=data_x, N = length(data_x))
init = list(alpha = exp(5), beta = exp(10), gamma= exp(5)/(1+exp(5)), sigma = exp(5))
StanDugongs<- "
data {
int <lower=1> N;
vector[N] x;
vector[N] y;
}
parameters {
real <lower=0> alpha;
real <lower=0> beta;
real <lower=0, upper=1> gamma;
real <lower=0> sigma;
}
model {
vector[N] mu;
mu = alpha + beta * gamma^(x);
alpha ~ uniform(0,100000);
beta  ~ uniform(0,100000);
gamma ~ beta(7,7/3);
sigma ~ uniform(0,100000);
y ~ normal(mu, sigma);
}
"
# PACKAGES AND DIRECORIES------------------------------------------------------
rm(list=ls())
thiswd <- "/Users/alice/Library/CloudStorage/OneDrive-UniversityofWarwick/COURSESandCONF/SMCmasterclass"
setwd(thiswd)
library(MASS)
library(mvtnorm)
# 1 - importance weights ------------------------------------------------------
# sample from the importance distribution
rq <- function(N, D){
y <- rmvnorm(N, mean = rep(0, D), sigma = diag(D)*2)
return(y)
}
# importance pdf
dq <- function(y){
dq <- dmvnorm(y, mean = rep(0, D), sigma = diag(D)*2)
return(dq)
}
# target pdf
dp <- function(x){
dp <- dmvnorm(x, mean = rep(0, D), sigma = diag(D))
return(dp)
}
N=10
D=1000
Y <- rq(N=N, D=D)
W <- rep(NA, 10)
for (n in 1:N){
W[n] <- dp(x=Y[n, ])/dq(y=Y[n, ])
}
W
# what is happening?
dp(x=Y[1, ])
dq(y=Y[1, ])
# 2 - importance log-weights ---------------------------------------------------
# importance lpdf
ldq <- function(y){
ldq <- dmvnorm(y, mean = rep(0, D), sigma = diag(D)*2, log=TRUE)
return(ldq)
}
# target lpdf
ldp <- function(x){
ldp <- dmvnorm(x, mean = rep(0, D), sigma = diag(D), log=TRUE)
return(ldp)
}
lW <- rep(NA, 10)
for (n in 1:N){
lW[n] <- ldp(x=Y[n, ])-ldq(y=Y[n, ])
}
lW
# what is happening?
ldp(x=Y[1, ])
ldq(y=Y[1, ])
# 3 - self-normalised weights ---------------------------------------------
Wtilde <- exp(lW)/ sum(exp(lW))
# first dimension plot
plot(Y[,1], Wtilde, type="h", lwd=4)
# 4 - max trick -----------------------------------------------------------
m <- max(lW)
t <- lW-m
ttilde <- exp(t)/sum(exp(t))
# first dimension plot
plot(Y[,1], ttilde, type="h", lwd=4)
t
# PACKAGES AND DIRECORIES------------------------------------------------------
rm(list=ls())
thiswd <- "/Users/alice/Library/CloudStorage/OneDrive-UniversityofWarwick/COURSESandCONF/SMCmasterclass"
setwd(thiswd)
library(MASS)
library(mvtnorm)
# 1 - importance weights ------------------------------------------------------
# sample from the importance distribution
rq <- function(N, D){
y <- rmvnorm(N, mean = rep(0, D), sigma = diag(D)*2)
return(y)
}
# importance pdf
dq <- function(y){
dq <- dmvnorm(y, mean = rep(0, D), sigma = diag(D)*2)
return(dq)
}
# target pdf
dp <- function(x){
dp <- dmvnorm(x, mean = rep(0, D), sigma = diag(D))
return(dp)
}
N=10
D=1000
Y <- rq(N=N, D=D)
W <- rep(NA, 10)
for (n in 1:N){
W[n] <- dp(x=Y[n, ])/dq(y=Y[n, ])
}
W
# what is happening?
dp(x=Y[1, ])
dq(y=Y[1, ])
# 2 - importance log-weights ---------------------------------------------------
# importance lpdf
ldq <- function(y){
ldq <- dmvnorm(y, mean = rep(0, D), sigma = diag(D)*2, log=TRUE)
return(ldq)
}
# target lpdf
ldp <- function(x){
ldp <- dmvnorm(x, mean = rep(0, D), sigma = diag(D), log=TRUE)
return(ldp)
}
lW <- rep(NA, 10)
for (n in 1:N){
lW[n] <- ldp(x=Y[n, ])-ldq(y=Y[n, ])
}
lW
# what is happening?
ldp(x=Y[1, ])
ldq(y=Y[1, ])
# 3 - self-normalised weights ---------------------------------------------
Wtilde <- exp(lW)/ sum(exp(lW))
# first dimension plot
plot(Y[,1], Wtilde, type="h", lwd=4)
# 4 - max trick -----------------------------------------------------------
m <- max(lW)
t <- lW-m
t
exp(t)/sum(exp(t))
t <- lW-m
ttilde <- exp(t)/sum(exp(t))
# first dimension plot
plot(Y[,1], ttilde, type="h", lwd=4)
ttilde
Wtilde
Wtilde <- exp(lW)/ sum(exp(lW))
# first dimension plot
plot(Y[,1], Wtilde, type="h", lwd=4)
# 4 - max trick -----------------------------------------------------------
m <- max(lW)
m
t <- lW-m
ttilde <- exp(t)/sum(exp(t))
# first dimension plot
plot(Y[,1], ttilde, type="h", lwd=4)
sum(exp(lW))
sum(exp(t))
t <- lW-m
ttilde <- exp(t)/sum(exp(t))
sum(exp(t))
# 3 - self-normalised weights ---------------------------------------------
sum(exp(lW))
# PACKAGES AND DIRECORIES------------------------------------------------------
rm(list=ls())
thiswd <- "/Users/alice/Library/CloudStorage/OneDrive-UniversityofWarwick/COURSESandCONF/SMCmasterclass"
setwd(thiswd)
library(MASS)
library(mvtnorm)
y <- read.csv("parus.csv")
View(y)
